package com.trantanphong.service.implement;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import org.apache.poi.ss.usermodel.Row;

import com.trantanphong.convert.StudentConvert;
import com.trantanphong.dto.SchoolYearDTO;
import com.trantanphong.dto.SchoolYearResearch;
import com.trantanphong.dto.StudentDTO;
import com.trantanphong.dto.SubjectDTO;
import com.trantanphong.entity.Class;
import com.trantanphong.entity.Student;
import com.trantanphong.repository.StudentRepository;
import com.trantanphong.service.ClassService;
import com.trantanphong.service.SchoolYearService;
import com.trantanphong.service.StudentService;
import com.trantanphong.service.SubjectService;

@Service
public class StudentServiceImp implements StudentService {

	@Autowired
	private StudentRepository studentRepository;

	@Autowired
	private StudentConvert studentConvert;

	@Autowired
	private ClassService classService;
	
	@Autowired
	private SchoolYearService schoolYearService;
	
	@Autowired
	private SubjectService subjectService;

	@Override
	public List<StudentDTO> getAllStudents() {
		// TODO Auto-generated method stub
		SchoolYearDTO dtoSchoolYear = schoolYearService.getSchoolYearMax();
		List<Student> students = studentRepository.findAll();
		List<StudentDTO> studentDTOs = new ArrayList<>();
		for (Student student : students) {
			StudentDTO dto = studentConvert.toDTO(student);
			if(student.getResearch() != null)
			{
				if(student.getResearch().getSchoolYear().getAcademicYear() == dtoSchoolYear.getAcademicYear()) {
					dto.setUpdateResearch(true);
				}
			}
			else
				dto.setUpdateResearch(true);
			studentDTOs.add(dto);
		}
		return studentDTOs;
	}

	@Override
	public List<StudentDTO> getStudentByNameClass(String className) {
		// TODO Auto-generated method stub
		SchoolYearDTO dtoSchoolYear = schoolYearService.getSchoolYearMax();	
		List<Student> students = studentRepository.findByClassName(className);
		List<StudentDTO> dtos = new ArrayList<>();
		for (Student student : students) {
			StudentDTO dto = studentConvert.toDTO(student);
			if(student.getResearch() != null)
			{
				if(student.getResearch().getSchoolYear().getAcademicYear() == dtoSchoolYear.getAcademicYear()) {
					dto.setUpdateResearch(true);
				}
				//dto.setUpdateResearch(false);
			}
			else
				dto.setUpdateResearch(true);
			dtos.add(dto);
		}
		return dtos;
	}

	@Override
	public boolean addListStudent(MultipartFile file) throws IOException {
		// TODO Auto-generated method stub
		if (!file.isEmpty()) {
			XSSFWorkbook workbook = new XSSFWorkbook(file.getInputStream());
			XSSFSheet sheet = workbook.getSheetAt(0);
			for (int i = 2; i <= sheet.getLastRowNum(); i++) {
				Row row = sheet.getRow(i);
				Boolean isInsert = true;
				Student student = new Student();
				if (row.getCell(1) != null) {
					if (row.getCell(1).getStringCellValue() != null)
						student.setStudentCode(row.getCell(1).getStringCellValue());
					else
						isInsert = false;
				} else
					isInsert = false;
				if (row.getCell(2) != null) {
					if (row.getCell(2).getStringCellValue() != null)
						student.setSurname(row.getCell(2).getStringCellValue());
					else
						isInsert = false;
				} else
					isInsert = false;
				if (row.getCell(3) != null) {
					if (row.getCell(3).getStringCellValue() != null)
						student.setFirstName(row.getCell(3).getStringCellValue());
					else
						isInsert = false;
				} else
					isInsert = false;
				if (row.getCell(4) != null) {
					if (row.getCell(4).getStringCellValue() != null) {
						if (row.getCell(4).getStringCellValue().equals("Nam")) {
							student.setGender((long) 0);
						} else {
							student.setGender((long) 1);
						}
					} else
						isInsert = false;
				} else
					isInsert = false;
				if (row.getCell(5) != null) {
					if (row.getCell(5).getStringCellValue() != null) {
						student.setNumberPhone(row.getCell(5).getStringCellValue());
					} else
						isInsert = false;
				} else
					isInsert = false;
				if (row.getCell(6) != null) {
					if (row.getCell(6).getStringCellValue() != null) {
						student.setEmail(row.getCell(6).getStringCellValue());
					} else
						isInsert = false;
				} else
					isInsert = false;

				if (row.getCell(7) != null) {
					if (row.getCell(7).getStringCellValue() != null) {
						Class class1 = classService.getClassById(row.getCell(7).getStringCellValue());
						student.setClassID(class1);
					} else
						isInsert = false;
				} else
					isInsert = false;
				if (isInsert)
					studentRepository.save(student);
			}
			workbook.close();
			return true;
		}
		return false;
	}

	@Override
	public StudentDTO save(StudentDTO dto) {
		// TODO Auto-generated method stub
		Student newEntity = new Student();
		Student oldEntity = studentRepository.findById(dto.getStudentCode()).orElse(null);
		if(oldEntity != null) {
			newEntity = studentConvert.toEntity(oldEntity, dto);
		}
		else
		{
			newEntity = studentConvert.toEntity(dto);
		}
		Class class1 = classService.getClassById(dto.getClassCode());
		newEntity.setClassID(class1);
		newEntity = studentRepository.save(newEntity);
		return studentConvert.toDTO(newEntity);
	}

	@Override
	public void delete(String studentCode) {
		// TODO Auto-generated method stub
		studentRepository.deleteById(studentCode);
	}

	@Override
	public List<Student> getAllStudentBySubject(String subjectId) {
		// TODO Auto-generated method stub
		return studentRepository.getAllStudentBySubject(subjectId);
	}

	@Override
	public Student getByStudentCode(String studentCode) {
		// TODO Auto-generated method stub
		return studentRepository.findById(studentCode).orElse(null);
	}

	@Override
	public boolean checkStudentNotResearch() {
		// TODO Auto-generated method stub
		List<Student> students = studentRepository.findAll();
		for (Student student : students) {
			if(student.getResearch() != null)
				return true;
		}
		return false;
	}

	@Override
	public long[] getStudentNotResearch() {
		// TODO Auto-generated method stub
		List<SubjectDTO> subjectDTOs = subjectService.getAll();
		for (SubjectDTO subjectDTO : subjectDTOs) {
			
		}
		return null;
	}

}
